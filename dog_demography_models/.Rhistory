rate<-as.data.frame(out)
rate<- rate %>%
mutate(diff = N - lag(N, default = first(N)))
head(rate)
plot(diff~N, data=rate)
parameters <- c(r = 0.4, K=1000, q = 1, E = 0.2)
state      <- c(N = 1)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = harvest, parms = parameters)
out <- ode(y = state, times = times, func = harvest, parms = parameters)
plot(out)
plot(out)
rate<-as.data.frame(out)
rate<- rate %>%
mutate(diff = N - lag(N, default = first(N)))
head(rate)
plot(diff~N, data=rate)
parameters <- c(r = 0.4, K=1000, q = 1, E = 0.6)
state      <- c(N = 1)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = harvest, parms = parameters)
out <- ode(y = state, times = times, func = harvest, parms = parameters)
plot(out)
plot(out)
rate<-as.data.frame(out)
rate<-as.data.frame(out)
rate<- rate %>%
mutate(diff = N - lag(N, default = first(N)))
head(rate)
plot(diff~N, data=rate)
parameters <- c(r = 0.8, K=1000, q = 1, E = 0.6)
state      <- c(N = 1)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = harvest, parms = parameters)
out <- ode(y = state, times = times, func = harvest, parms = parameters)
plot(out)
plot(out)
rate<-as.data.frame(out)
head(rate)
plot(diff~N, data=rate)
plot(diff~N, data=rate)
parameters <- c(r = 0.8, K=1000, q = 1, E = 0.6)
state      <- c(N = 1)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = harvest, parms = parameters)
rate<-as.data.frame(out)
rate<- rate %>%
mutate(diff = N - lag(N, default = first(N)))
head(rate)
plot(diff~N, data=rate)
list(c(dS,dI,dR))
SIR<-function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS = - beta*S*I
dI = beta*I*S - gamma * I
dR = gammaa * I
list(c(dS,dI,dR))
})
}
parameters <- c(beta = 1, gamma = 8)
state      <- c(S = 100, I=0, R=0)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
SIR<-function(t, state, parameters) {
with(as.list(c(state, parameters)), {
dS = - beta*S*I
dI = beta*I*S - gamma * I
dR = gamma * I
list(c(dS,dI,dR))
})
}
parameters <- c(beta = 1, gamma = 8)
state      <- c(S = 100, I=0, R=0)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
parameters <- c(beta = 0.5, gamma = 8)
state      <- c(S = 100, I=0, R=0)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
rate<-as.data.frame(out)
plot(out)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
parameters <- c(beta = 5, gamma = 2)
state      <- c(S = 100, I=0, R=0)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
parameters <- c(beta = 5, gamma = 2)
state      <- c(S = 100, I=0, R=0)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
rate<-as.data.frame(out)
state      <- c(S = 100, I=1, R=1)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
rate<-as.data.frame(out)
out
plot(out)
parameters <- c(beta = 5, gamma = 3)
state      <- c(S = 100, I=1, R=1)
times      <- seq(0, 1000, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
parameters <- c(beta = 5, gamma = 3)
state      <- c(S = 100, I=1, R=1)
times      <- seq(0, 10, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
parameters <- c(beta = 5, gamma = 3)
parameters <- c(beta = 4, gamma = 3)
state      <- c(S = 100, I=1, R=1)
times      <- seq(0, 10, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
head(out)
rate<- rate %>%
mutate(diff.S = S - lag(S, default = first(S)))
head(rate)
plot(diff.S~S, data=rate)
parameters <- c(beta = 4, gamma = 3)
state      <- c(S = 100, I=1, R=1)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
rate<-as.data.frame(out)
head(out)
rate<- rate %>%
mutate(diff.S = S - lag(S, default = first(S)))
head(rate)
plot(diff.S~S, data=rate)
plot(diff.S~S, data=rate, type="l")
state      <- c(S = 1, I=0, R=0)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
rate<-as.data.frame(out)
head(out)
rate<- rate %>%
mutate(diff.S = S - lag(S, default = first(S)))
head(rate)
plot(diff.S~S, data=rate, type="l")
state      <- c(S = 1000, I=1, R=1)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
rate<-as.data.frame(out)
head(out)
rate<- rate %>%
mutate(diff.S = S - lag(S, default = first(S)))
head(rate)
plot(diff.S~S, data=rate, type="l")
state      <- c(S = 1, I=1, R=1)
times      <- seq(0, 100, by = 0.01)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
out <- ode(y = state, times = times, func = SIR, parms = parameters)
plot(out)
plot(out)
rate<-as.data.frame(out)
plot(out)
rate<-as.data.frame(out)
head(out)
head(rate)
plot(diff.S~S, data=rate, type="l")
rate<- rate %>%
mutate(diff.S = S - lag(S, default = first(S)))
head(rate)
plot(diff.S~S, data=rate, type="l")
plot(out)
setwd("/media/manvi/New Volume/Manvi.iisc/IISc_Phd/Kavita/Thesis_Data/Manuscripts/Manuscript3_egg_larvae/Data_code/Excel_sheets")
setwd("/media/manvi/New Volume/Manvi.iisc/Kavita/Thesis_Data/Manuscripts/Manuscript3_egg_larvae/Data_code/Excel_sheets")
#datasets
dat1<-read.csv("nishadata.csv", na.strings = c("","NA"," "))
egg<-dat1
---
title: "egg_larvae_march"
author: "Manvi"
date: "March 12, 2018"
output: html_document
editor_options:
chunk_output_type: console
---
```{r loading files and packages, echo=FALSE}
setwd("/media/manvi/New Volume/Manvi.iisc/Kavita/Thesis_Data/Manuscripts/Manuscript3_egg_larvae/Data_code/Excel_sheets")
#datasets
dat1<-read.csv("nishadata.csv", na.strings = c("","NA"," "))
egg<-dat1
dat2<-read.csv("ashwinidata.csv", na.strings = c(""," ","NA")) #data on larvae by Ashwini
lar<-dat2
#eglar is not for this paper
eglar<-read.csv("monalidata.csv", na.strings = c(""," ","NA")) #data on both eggs and larvae by Monali
#packages
library(ggplot2)
library(dplyr)
library(reshape2)
library(Hmisc)
library(lme4)
```
```{r larval plots, echo=FALSE}
str(lar)
#dataset cleaning
#converting eggcounts to numerical
lar$control<-as.numeric(as.character(lar$control))
lar$treatment<-as.numeric(as.character(lar$treatment))
lar$density<-as.factor(lar$density)
head(lar)
#converting dataset to longform
dummy<-melt(lar, id=c("status","density","id","position","day"))
lar<-dummy
lar<-dplyr::select(lar,id, density,variable,value,day) #seelcting only few columns for plotting
colnames(lar)<-c("id","density","treat","egg_count","day")
#summing values for 3 days
head(lar)
str(lar)
lar$egg_count<-as.numeric(as.character(lar$egg_count))
lar_sums <- lar %>% group_by(id,treat,density) %>%
summarise(egg_sum = sum(egg_count, na.rm=TRUE))
str(lar_sums)
#lar_sums <- lar_sums %>% group_by(id,density) %>%
# mutate(egg_total = sum(egg_sum, na.rm=TRUE))
head(lar_sums)
#lar_sums<-mutate(lar_sums, pro=egg_sum/egg_total)
#plots
#plot of eggcounts per day
g<-ggplot(data=lar, aes(x=density, y=egg_count, col=treat))
g + geom_boxplot()
#plot of proportion of eggcounts summed across 3 days
#g<-ggplot(data=lar_sums, aes(x=density, y=pro, col=treat))
#g + geom_boxplot()
#g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), position = position_dodge(width=0.5)) + theme_classic(base_size = 14) + xlab("Larval density") + ylab("Proportion of eggs laid")
#getting oai - get wide form data
head(lar_sums)
lar_wide <- dcast(lar_sums, formula = density + id ~ treat )
head(lar_wide)
lar_oai<-lar_wide %>% mutate(oai = ((treatment-control)/(treatment+control)))
#plotting oai
g<-ggplot(data=lar_oai, aes(x=density, y=oai, col=density))
g + geom_boxplot()
g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), position = position_dodge(width=0.5), col="black") + ylim(-1,1)+ theme_classic(base_size = 14) + xlab("Larval density") + ylab("OAI")
#simple anova for counts
# head(lar)
# mod1<-aov(pro~as.factor(density), data = lar_sums[lar_sums$treat=="treatment",])
# hist(lar_sums$pro)
# summary(mod1)
# # plot(mod1)
# # TukeyHSD(mod1)
#
# #non parametric test
# kruskal.test(pro ~ as.factor(density), data = lar_sums[lar_sums$treat=="treatment",])
```
```{r nisha data on eggs, echo=FALSE}
head(egg)
str(egg)
summary(egg)
names(egg)
egg<-dplyr::select(egg,id,n_e,treatment,egg_count,day)
head(egg)
#adding a proper column for treat
egg<-mutate(egg, density=ifelse(treatment=="C","0",
ifelse(treatment=="L","20",
ifelse(treatment=="M","70",
ifelse(treatment=="H","155","240")))))
egg$treat<-rep(c("Control","Treatment"),225)
# selecting eggs for
# head(egg)
# egg<-select(egg,id,density,treat,eggs,day)
# colnames(egg)<-c("id","density","treat","egg_count","day")
# egg_sums$density<-as.factor(egg_sums$density)
#summing values for 3 days
head(egg)
str(egg)
egg$egg_count<-as.numeric(as.character(egg$egg_count))
egg_sums <- egg %>% group_by(id,treat,density) %>%
summarise(egg_sum = sum(egg_count, na.rm=TRUE))
str(egg_sums)
#egg_sums <- egg_sums %>% group_by(id,density) %>%
# mutate(egg_total = sum(egg_sum, na.rm=TRUE))
head(egg_sums)
#egg_sums<-mutate(egg_sums, pro=egg_sum/egg_total)
#getting oai - get wide form data
head(egg_sums)
egg_sums$density<-as.factor(egg_sums$density)
egg_wide <- dcast(egg_sums, formula = density + id ~ treat )
#alterntively, just read the data again
head(egg_wide)
egg_oai<-egg_wide %>% mutate(oai = ((Treatment-Control)/(Treatment+Control)))
head(egg_oai)
#plotting
#ordering x axis for plotting
egg_oai$density <- factor(egg_oai$density, levels=c("0","20","70","155","240"))
g<-ggplot(data=egg_oai, aes(x=density, y=oai))
g + geom_boxplot()
g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), position = position_dodge(width=0.5), col="black") + theme_classic(base_size = 14) + xlab("Egg/larvae density") + ylab("OAI")
```
```{r OAI:egg and larvae metadata, echo=FALSE}
# prelim analysing oai dataset without block info
head(egg_oai)
egg_oai$status<-rep("Egg", 75)
head(lar_oai)
lar_oai$status<-rep("Larva",91)
lar_oai<-dplyr::select(lar_oai, -block)
colnames(egg_oai)<-c("density","id","control","treatment","oai","status")
meta<-rbind(egg_oai,lar_oai)
#plotting
#using only comparable densities
meta_trunc<-meta[meta$density=="20"|meta$density=="70"|meta$density=="155",]
g<-ggplot(data=meta_trunc, aes(x=density, y=oai, col=status))
g + geom_boxplot()
g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), position = position_dodge(width=0.5)) + theme_classic(base_size = 14) + xlab("Egg/larvae density") + ylab("OAI")
#joining block id information to build random effect models
head(egg_oai)
head(dat1)
dummy1<- egg_oai %>% inner_join(dat1, by="id")
head(dummy1)
dummy1<-dummy1 %>% dplyr::select(density:status, block)
dummy1<-unique(dummy1)
egg_formeta<-cbind(egg_oai, dummy1$block)
colnames(egg_formeta)<-c("density","id","control","treatment","oai","status","block")
#similarly get block id for larvae dataset
head(lar_oai)
head(dat2)
dummy2<-lar_oai %>% inner_join(dat2, by="id")
head(dummy2)
dummy2<-dummy2 %>% dplyr::select(density.x:status.x, block)
dummy2<-unique(dummy2)
lar_formeta<-cbind(lar_oai, dummy2$block)
names(lar_formeta)
colnames(lar_formeta)<-c("density","id","control","treatment","oai","status","block")
#joining eggformeta and larformeta
meta_ana<-rbind(egg_formeta,lar_formeta)
##Running lmer on oai with block as random effect
#cleaning meta
table(meta_ana$block)
meta_ana$block<-rep(c(1,2,3,4,5,6,7), times=c(20,20,20,15,47,26,18))
str(meta_ana)
meta_ana<-meta_ana[complete.cases(meta_ana$oai),]
meta_ana$id<-as.factor(meta_ana$id)
meta_ana$status<-as.factor(meta_ana$status)
meta_ana$block<-as.factor(meta_ana$block)
meta_trunc1<-meta_ana[meta_ana$density=="20"|meta_ana$density=="70"|meta_ana$density=="155",]
#lmer
str(meta_ana)
mod1<-lmer(oai~status+density+status:density+(1|block), data=meta_trunc1)
summary(mod1)
plot(mod1)
plot(resid(mod1)~fitted(mod1))
plot(qqnorm(resid(mod1)))
points(qqline(resid(mod1)))
#model simplification only for interaction term
mod2<-update(mod1, .~.-status:density)
anova(mod1,mod2)
plot(resid(mod2)~fitted(mod2))
plot(qqnorm(resid(mod2)))
points(qqline(resid(mod2)))
#dropping non significant interaction term
mod3<-update(mod2, .~.-status)
anova(mod2,mod3)
mod4<-update(mod2, .~.-density)
anova(mod2,mod4)
summary(mod2)
TukeyHSD(mod2)
#plotting
g<-ggplot(data=meta_trunc1, aes(x=density, y=oai))
g + geom_boxplot(notch = TRUE)+theme_classic(base_size = 14) + xlab("Egg/larvae density") + ylab("OAI")+facet_grid(~status)
g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), position = position_dodge(width=0.5)) + theme_classic(base_size = 14) + xlab("Egg/larvae density") + ylab("OAI")
```
```{r total eggs for meta, echo=FALSE}
head(meta_trunc1)
#calculate total eggs laid for meta_trunc1
meta_trunc1 <- meta_trunc1 %>% mutate(total = control + treatment)
#plotting total eggs
g<-ggplot(data=meta_trunc1, aes(x=density, y=total, col=status))
g + geom_boxplot()
g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), position = position_dodge(width=0.5)) + theme_classic(base_size = 14) + xlab("Density treatment") + ylab("Total eggs laid")
#running simple poisson for count data
str(meta_trunc1)
tmod1<-glm(total~density*status, data=meta_trunc1, family=poisson)
summary(tmod1)
plot(tmod1) #very nice fit!
plot(tmod2)
plot(qqnorm(resid(tmod2)))
points(qqline(resid(tmod2)))
#model simplification and interpretation
tmod3<-update(tmod2, .~.-status:density)
anova(tmod2,tmod3)
#dropping the non significant interaction term
plot(resid(tmod3)~fitted(tmod3))
plot(qqnorm(resid(tmod3)))
points(qqline(resid(tmod3)))
tmod4<-update(tmod3, .~.-status)
anova(tmod4,tmod3)
tmod5<-update(tmod3, .~.-density)
anova(tmod5,tmod3)
```
```{r final figures for paper, echo=FALSE}
#OAI
g<-ggplot(data=meta_trunc, aes(x=density, y=oai))
g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), size = 0.75, position = position_dodge(width=0.5)) + theme_classic(base_size = 14) + xlab("Density treatment") + ylab("Oviposition Activity Index") + ylim(-1,1) + facet_grid(.~status)
#total eggs laid
head(meta_trunc)
g<-ggplot(data=meta_trunc1, aes(x=density, y=total))
g + geom_boxplot()
g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), size=0.75, position = position_dodge(width=0.5)) + theme_classic(base_size = 14) + xlab("Density treatment") + ylab("Fecundity") + facet_grid(.~status)
#eggs laid in control and treatment
head(meta_trunc1)
dummy<-melt(meta_trunc1,id=c("density","id","oai","status","block","total"))
head(dummy)
g<-ggplot(data=dummy, aes(x=density, y=value, col=variable))
g + geom_point(position = position_dodge(width = 0.5))
g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), size=0.75, position = position_dodge(width=0.5)) + theme_classic(base_size = 14) + xlab("Density treatment") + ylab("Fecundity") + facet_grid(.~status)
```
```{r variation in female strategy, echo=FALSE}
head(meta_trunc1)
g<-ggplot(data=meta_trunc1, aes(x=density, y=oai, col=status))
g + geom_boxplot()
g + geom_point(position = "jitter") + theme_classic(base_size = 14) + xlab("Density treatment")
g<-ggplot(data=meta_trunc1, aes(oai))
g+geom_bar(aes(x=oai), stat = "count", width = .2) + theme_classic(14) + facet_grid(~status)+ylab("Frequency")+xlab("Oviposition Activity Index")
head(meta_trunc1)
bimodality_coefficient(meta_trunc1$oai[meta_trunc1$status=="Egg"])
bimodality_coefficient(meta_trunc1$oai[meta_trunc1$status=="Larva"])
Mode(meta_trunc1$oai[meta_trunc1$status=="Egg"])
#uncertainty on BM coefficient
iter <- 1000 # number of iterations
store <- numeric(iter) # storing randomised statistic
## iterating and storing randomised statistic
for (i in 1:iter) {
y.new <- sample(meta_trunc1$oai[meta_trunc1$status=="Egg"], replace=TRUE) #Randomly shuffle ONLY response variable from observed dataframe and create a new dataframe 'y.new'
diff.y <- bimodality_coefficient(y.new) # calculate mean difference for shuffled y
store[i] <- diff.y # Store the 'difference'
}
store[1:10] # Check store
quantile(store, probs=c(0.025, 0.975))
iter <- 1000 # number of iterations
store <- numeric(iter) # storing randomised statistic
## iterating and storing randomised statistic
for (i in 1:iter) {
y.new <- sample(meta_trunc1$oai[meta_trunc1$status=="Larva"], replace=TRUE) #Randomly shuffle ONLY response variable from observed dataframe and create a new dataframe 'y.new'
diff.y <- bimodality_coefficient(y.new) # calculate mean difference for shuffled y
store[i] <- diff.y # Store the 'difference'
}
store[1:10] # Check store
quantile(store, probs=c(0.025, 0.975))
#Calculate CoV in oai
CV <- function(mean, sd){
(sd/mean)*100
}
names(meta_trunc1)
boot.fun <- function(x){
boot.s <- numeric(iter)
for (i in 1:iter){
boot.d <- sample(x, replace=TRUE)
boot.s[i] <- (sd(boot.d)/mean(boot.d))*100
}
quantile(boot.s, probs= c(0.025, 0.975))
}
head(meta_trunc1)
cv.met<-meta_trunc1 %>%
group_by(status, density) %>%
summarise(cv.l = boot.fun(oai)[1], mean.cv = sd(oai)/mean(oai)*100, cv.u = boot.fun(oai)[2])
g<-ggplot(cv.met[cv.met$density!="155",], aes(x=density, y=mean.cv,col=status))
g + geom_point(position=position_dodge(width=0.5),stat = "identity", beside=TRUE)+ geom_errorbar(aes(ymin=cv.l, ymax=cv.u), width=.1,position=position_dodge(width=0.5))+ylab("CoV in OAI")+xlab("Density")+theme_classic(base_size=14)
```
```{r egg-larvae data, echo=FALSE}
# head(eglar)
# str(eglar)
# #dataset cleaning
# #converting eggcounts to numerical
# eglar$egg<-as.numeric(as.character(eglar$egg))
# eglar$larvae<-as.numeric(as.character(eglar$larvae))
# eglar$density<-as.factor(eglar$density)
#
# #converting dataset to longform
# dummy<-melt(eglar, id=c("status","density", "id"))
# eglar<-dummy
# eglar<-select(eglar, id,density,variable,value) #seelcting only few columns for plotting
# colnames(eglar)<-c("id","density","treat","egg_count")
#
# #getting proportion of eggs laid
# head(eglar)
# eglar_sums <- eglar %>% group_by(id,density) %>%
#   mutate(egg_total = sum(egg_count, na.rm=TRUE))
# head(eglar_sums)
# eglar_sums<-mutate(eglar_sums, pro=egg_count/egg_total)
#
#
# #plot of eggcounts per day
# g<-ggplot(data=eglar, aes(x=density, y=egg_count, col=treat))
# g + geom_boxplot()
#
# #plot of proportion of eggcounts summed across 3 days
# g<-ggplot(data=eglar_sums, aes(x=density, y=pro, col=treat))
# g + geom_boxplot()
# g + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), position = position_dodge(width=0.5)) + theme_classic(base_size = 14) + xlab("Egg/larval density") + ylab("Proportion of eggs laid")
#
# #getting oai - need wide form data
# head(eglar)
# eglar_wide <- dcast(eglar, formula = density + id ~ treat )
# #alterntively, just read the data again
# eglar_oai<-eglar %>% mutate(oai = ((egg-larvae)/(egg+larvae)))
#
# #plotting oai
# g<-ggplot(data=eglar_oai, aes(x=density, y=oai, col=density))
# g + geom_boxplot()
# g + geom_point() + stat_summary(fun.data="mean_cl_boot", fun.args=list(conf.int=.95, B=10000), position = position_dodge(width=0.5), col="black") + theme_classic(base_size = 14) + xlab("Egg/larvae density") + ylab("OAI")
```
#Using deSpolve and Reactran to solve simple PDEs
library(deSolve)
